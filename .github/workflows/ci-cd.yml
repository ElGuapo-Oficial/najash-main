name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  setup: # Job for general setup
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      
  client: # Separate job for client
    needs: setup
    runs-on: ubuntu-latest
    env:
      REACT_APP_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_GRAPHQL_ENDPOINT }}
      
    steps:
    - name: Install dependencies (Client)
      working-directory: ./client
      run: npm ci
      
    - name: Build and push Client Docker image
      run: docker buildx build --platform linux/arm64 -t najash01/client-app:latest -f ./client/Dockerfile ./client --push
      
  server: # Separate job for server
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
    - name: Install dependencies and test (Server)
      working-directory: ./server
      run: |
        npm ci
        npm test
        
    - name: Build and push Server Docker image
      run: docker buildx build --platform linux/arm64 -t najash01/server-app:latest -f ./server/Dockerfile ./server --push
      
  deploy:
    needs: [client, server] # This ensures the client and server jobs complete before deploying
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy on AWS EC2
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_ssh_key.pem
        chmod 600 ec2_ssh_key.pem
        ssh -i ec2_ssh_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_INSTANCE_IP }} "${{ secrets.DEPLOY_SCRIPT_PATH }}"
